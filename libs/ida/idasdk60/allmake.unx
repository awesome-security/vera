#
# The following environment variables may be defined to influence the build process
#
#  __LINUX__    build linux version
#  __MAC__      build mac os x version
#  __IPHONE__   build iphone version
#  __BSD__      build bsd version
#
#  __EA64__     build 64-bit version (add 64-bit support, the application itself stays 32-bit)
#  __X64__      build 64-bit version of IDA itself (with 64-bit support)
#
#  __ARM__      build for ARM (default is Intel)
#

ifdef __IPHONE__
__MAC__=1
endif

ifdef __ARM__
PROCFLAG=-D__ARM__
TARGET_PROCESSOR=arm
OLD_GCC=1
else
TARGET_PROCESSOR=pc
endif

ifndef QTDIR
  ifdef __LINUX__
    QTDIR=/usr/local/Trolltech/Qt-4.6.3/
  else
    QTDIR=/Users/Shared/Qt/4.6.3/
  endif
endif

ifdef __OPT__
CCOPT=-O2 -ffunction-sections -fdata-sections
OPTSUFF=opt
ifdef __MAC__
 ifndef MAC_NO_DEAD_STRIP
   DEAD_STRIP=,-dead_strip
 endif
 OUTDLLOPTS=-Wl,-S,-x$(DEAD_STRIP)
else
 OUTDLLOPTS=-Wl,--strip-debug,--discard-all
endif
else
CCOPT=-g
OPTSUFF=
OUTDLLOPTS=
endif

ifdef __X64__
__EA64__=1
_SWITCH64=-D__X64__
__PIC__=1
X64SUFF=x
endif

ifdef __EA64__
SUFF64=64
ADRSIZE=64
SWITCH64=$(_SWITCH64) -D__EA64__
else
ADRSIZE=32
endif

ifdef __LINUX__
  STDLIBS=-lrt -lpthread
  SYSNAME=linux
  # _FORTIFY_SOURCE=0 removes a reference to GLIBC2.11 symbol (setjmp)
  ifndef OLD_GCC
    VISFLAGS=-fvisibility=hidden -fvisibility-inlines-hidden
  endif
  SYS=$(PROCFLAG) -D__LINUX__ -D_FORTIFY_SOURCE=0 $(VISFLAGS) --shared
  ifndef ALLOW_UNDEFS
    NO_UNDEFS=-Wl,--no-undefined
  endif
  _OUTDLL=-Wl,--gc-sections $(NO_UNDEFS) $(OUTDLLOPTS)
  ifdef __X64__
    DIRSUFF=.lnx64
    MODSUFF=.ix
    PLGSUFF=.px
    LDRSUFF=.lx
    DLLSUFF=x.so
  else
    DIRSUFF=.lnx
    MODSUFF=.ilx
    PLGSUFF=.plx
    LDRSUFF=.llx
    DLLSUFF=.so
  endif
else
ifdef __BSD__
  STDLIBS=-lpthread
  SYSNAME=bsd
  # removing --shared makes it impossible to build shared libraries
  # but we need to build only ida.key decryptor under bsd
  SYS=$(PROCFLAG) -D__BSD__ # --shared
  _OUTDLL=-Wl,--no-undefined $(OUTDLLOPTS)
  DIRSUFF=.bsd
  MODSUFF=.ibsd
  LDRSUFF=.lbsd
  PLGSUFF=.pbsd
  DLLSUFF=.so
  MAKE=/usr/local/bin/gmake
else
  ifndef MAC_EXPORT_ALL
    SYS=$(PROCFLAG) -D__MAC__ -fvisibility=hidden -fvisibility-inlines-hidden
  else
    SYS=$(PROCFLAG) -D__MAC__
  endif
  _OUTDLL=-dynamiclib -current_version 1.0 -compatibility_version 1.0 -single_module $(OUTDLLOPTS)
  DLLSUFF=.dylib
  ifdef __IPHONE__
    SYSNAME=iphone
    DEV=/Developer/Platforms/iPhoneOS.platform/Developer
    SDK=$(DEV)/SDKs/iPhoneOS2.2.sdk
    CC = $(DEV)/usr/bin/gcc-4.0
    CCPLUS = $(DEV)/usr/bin/g++-4.0
    ASM_ARCH_CFLAGS = -arch arm
    ARCH_CFLAGS = $(ASM_ARCH_CFLAGS) \
    -B"$(SDK)" \
    -I"$(SDK)/usr/include" \
    -I"$(SDK)/usr/include/c++/4.0.0" \
    -I"$(SDK)/usr/include/c++/4.0.0/arm-apple-darwin8" \
    -I"$(SDK)/usr/lib/gcc/arm-apple-darwin9/4.0.1/include" \
    -D_DARWIN_NO_64_BIT_INODE=1 \
    -L"$(SDK)/usr/lib" \
    -mmacosx-version-min=10.3
    DIRSUFF=.mac_iphone
    MODSUFF=.imc
    LDRSUFF=.lmc
    PLGSUFF=.pmc
    NO_EXECUTE_TESTS=1
  else
    SYSNAME=mac
    ifdef __X64__
      DIRSUFF=.mac64
      MODSUFF=.im
      PLGSUFF=.pm
      LDRSUFF=.lm
      DLLSUFF=x.dylib
      MFLAG  =-m64
      ASM_ARCH_CFLAGS=-arch x86_64
    else
      DIRSUFF=.mac
      MODSUFF=.imc
      PLGSUFF=.pmc
      LDRSUFF=.lmc
      MFLAG  =-m32
      ASM_ARCH_CFLAGS=-arch i386
    endif
    ARCH_CFLAGS=$(ASM_ARCH_CFLAGS) -mmacosx-version-min=10.3 $(MFLAG)
  endif
  DYLSUF=$(SUFF64)$(X64SUFF)$(DLLSUFF)
  FIX_IDALIB_PATH=install_name_tool -change $(R)libida$(DYLSUF) @executable_path/libida$(DYLSUF)
  FIX_TVLIB_PATH=install_name_tool -change $(R)libtvision$(X64SUFF)$(DLLSUFF) @executable_path/libtvision$(X64SUFF)$(DLLSUFF)
endif
endif
OUTDLL=$(SYS) $(_OUTDLL)
DEVKEY_TO_BIN=1

ifndef IDA
IDA=$(HOME)/idasdk/60/
endif

# output directory for target platform
R=$(IDA)bin/
# input directory with existing build utilities
RS=$(IDA)bin/
# output directory for new build utilities
RT=$(IDA)bin/
C=$(RS)cfg/
H=$(RS)
RI=$(RS)idc/
I=$(IDA)include/
LIBDIR=$(IDA)lib/gcc$(ADRSIZE)$(DIRSUFF)$(OPTSUFF)
L=$(LIBDIR)/

HH=.hhp
HS=.hls
O=.o$(X64SUFF)$(ADRSIZE)
A=.a
B=$(X64SUFF)$(SUFF64)
BS=$(X64SUFF)$(SUFF64)
IDP=$(SUFF64)$(MODSUFF)$(SUFF64)
LDR=$(SUFF64)$(LDRSUFF)$(SUFF64)
PLUGIN=$(PLGSUFF)$(SUFF64)
CONLY=-c
CFLAGS=$(CCOPT) $(SYS) $(SWITCH64) -I$(I) -DNO_OBSOLETE_FUNCS $(_CFLAGS) $(ARCH_CFLAGS) $(PIC) -pipe
OBJDIR=obj/gcc$(ADRSIZE)$(DIRSUFF)$(OPTSUFF)
F=$(OBJDIR)/

CP=cp
MV=mv
RM=rm
AS=as
MKDIR=-@mkdir 2>/dev/null

ifdef __IPHONE__
O=.o$(ADRSIZE)_iphone
A=.a_iphone
R=$(IDA)bin/iphone/
RT=$(IDA)bin/iphone/
AS=$(DEV)/usr/bin/as -arch arm
STDLIBS=-lpthread -liconv
else
ifdef __MAC__   # plain mac
ifdef __X64__
LIBICONV=-liconv
else
LIBICONV=$(L)libiconv.2.2.0.dylib
endif
STDLIBS=-lpthread $(LIBICONV)
endif
endif

ifndef __IPHONE__
ifdef __LSB__
LSBOPTS=--lsb-shared-libs=ida:tvision:clp
CC=/opt/lsb/bin/lsbcc --lsb-cc=gcc $(LSBOPTS)
CCPLUS=/opt/lsb/bin/lsbc++ --lsb-cxx=g++ $(LSBOPTS)
else
CC=gcc
CCPLUS=g++
endif
endif

ifdef __LINUX__
CCL=$(CCPLUS) $(STDLIBS)
else
CCL=$(CCPLUS) $(CFLAGS) $(STDLIBS)
endif

HLIB=$(H)_ida.hlp
DUMB=$(L)dumb$(O)
IDALIB=$(R)libida$(SUFF64)$(DLLSUFF)

ifdef __PIC__
  PIC=-fPIC
endif

AR=$(RS)qar.sh rus
HC=$(RS)ihc$(BS)
PYTHON=/usr/bin/python
NASM=/usr/bin/nasm
SWIG=/usr/bin/swig
OUTSW=-o #with space
OBJSW=-o #with space

.SUFFIXES: $(HH) $(HS) .c .h .cpp .hpp $(O) .at $(A) .grm .cfg
.PHONY: all includes Goal goal config cfg $(ADDITIONAL_GOALS)

$(F)%$(O): %.cpp
	$(CCPLUS) $(CFLAGS) -c $(OBJSW)$@ $<

$(F)%$(O): %.c
ifdef DONT_FORCE_CPP
	$(CC) $(CFLAGS) -c $(OBJSW)$@ $<
else
	$(CCPLUS) $(CFLAGS) -c $(OBJSW)$@ $<
endif

.hls.hhp:
	$(HC) -t $(HLIB) -i$@ $<

